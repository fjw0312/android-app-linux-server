#include <string.h>
#include <stdio.h>
#include <mntent.h>
#include <sys/vfs.h>

#include "stdsys.h"
#include <sys/file.h>
#include "basetypes.h"
#include "pubfunc.h"
#include "halcomm.h"
#include "new.h"
#include "err_code.h"

#include "commvirtual.h"

//provide for sample process to eliminate the status of warning
void Read_warning_status(char *w_status)
{
	strcpy(w_status,warning_status);
}

void DBGetCpuInfo(int *CpuOccupancy)
{
	unsigned long n_user;
	unsigned long n_nice;
	unsigned long n_system;
	unsigned long n_idle;
	FILE *fp;
	char buf[256];
	char name[]="cpu";
	int  nl = 0 ;
	float  tmp;
	
	fp=fopen(_PATH_CPUINFO,"rt");
	if(!fp)
	{
		printf ("Can't open file %s\n",_PATH_CPUINFO );
		n_user=0;
		n_nice=0;
		n_system=0;
		n_idle=0;
		return;
	}
	while (fgets(buf, sizeof(buf), fp)!= NULL)
	{
		if(nl>=0)
		{
			int ifl = 0;
			while(buf[ifl]!=':' && buf[ifl]!='\t' && buf[ifl]!='\0'&& buf[ifl]!=' ')
				ifl++;
			//printf ("buf=%s search=%s ifl=%d\n", buf,name,ifl );
			if( strstr(buf,name) )
			{
				//printf("seached! cpu info = %s\n", buf+ifl+1);
				if( sscanf(buf+ifl+1,"%ld%ld%ld%ld", &n_user, &n_nice, &n_system, &n_idle) != 4 )
				{
					n_user=0;
					n_nice=0;
					n_system=0;
					n_idle=0;
					fclose(fp);
					return;
				}
				fclose ( fp );
				//printf("user:%ld,nice:%ld,system:%ld,idle:%ld\n",n_user,n_nice,n_system,n_idle);
				tmp =(float)((n_user+n_nice+n_system)*100)/(float)(n_user+n_nice+n_system+n_idle);
				//printf("cpu occupancy is about %f\n", tmp);
				*CpuOccupancy = tmp;
				return;
			}
			ifl=0;
		}
		nl++;
	}
	fclose(fp);
}

void DBGetFlashInfo(int *FlashOccupancy)
{
	FILE *mount_table;
	struct mntent *mount_entry;
	struct statfs s;
	const char *device;
	const char *mount_point;
	long blocks_used;
	long blocks_percent_used;

	
	mount_table = NULL;
	if (!(mount_table = setmntent("/proc/mounts", "r"))) 
	{
		printf("set /proc/mounts error!\n");
		return;
	}
	
	if (mount_table) 
	{
		if (!(mount_entry = getmntent(mount_table))) 
		{
			endmntent(mount_table);
			printf("can't get mount table!\n");
			return;
		}
	}
	device = mount_entry->mnt_fsname;
	mount_point = mount_entry->mnt_dir;
	if (statfs(mount_point, &s) != 0) 
	{
		printf("can not get s struct!\n");
		return;
	}
	if ((s.f_blocks > 0) || !mount_table)
	{
		blocks_used = s.f_blocks - s.f_bfree;
		blocks_percent_used = 0;
		if (blocks_used + s.f_bavail) 
		{
			blocks_percent_used = (((long long) blocks_used) * 100
							   + (blocks_used + s.f_bavail)/2
							   ) / (blocks_used + s.f_bavail);
		}
		//printf("flash occupancy : %3ld\n", blocks_percent_used);
		*FlashOccupancy= blocks_percent_used;
	}
}

void DBGetMemInfo(int *MemOccupancy)
{
	FILE *fp;
	int  nl = 0 ;
	float  tmp;
	char buff[256];
	char name1[]="MemTotal";
	char name2[]="MemFree";
	unsigned long mem_total;
	unsigned long mem_free;
	
	fp=fopen(_PATH_MEMINFO,"rt");
	if(!fp)
	{
		printf ("Can't open file %s\n",_PATH_MEMINFO );
		mem_total=0;
		mem_free=0;
		return;
	}
	while(fgets(buff, sizeof(buff), fp)!= NULL)
	{
		if(nl>1)
		{
			int ifl = 0;
			while(buff[ifl]!=':' && buff[ifl]!='\t' && buff[ifl]!='\0')
				ifl++;
		//	buff[ifl]=0;    /* interface */
		//	printf ("interface=%s search=%s\n", buff,interface );
		
			if ( strstr( buff, name1) )
			{
				//printf ("searched! mem_total=%s\n", buff+ifl+1 );
				if(sscanf(buff+ifl+1,"%ld",&mem_total)!=1)
				{
					mem_total=0;
					fclose(fp);
					return;
				}
			}
			if ( strstr( buff, name2) )
			{
			//	printf ("searched! mem_free=%s\n", buff+ifl+1 );
				if(sscanf(buff+ifl+1,"%ld",&mem_free)!=1)
				{
					mem_free=0;
					fclose(fp);
					return;
				}
				fclose(fp);
				//in order to enhance the efficence of program, only found the second data,the program
				//will return, so put the calculation here!
				tmp=((float)mem_free * 100)/(float)mem_total;
				//printf("tmp=%f\n", tmp);
				*MemOccupancy=100 - tmp;
				return;
			}
			ifl=0;					
		}
		nl++;
	}
	fclose(fp);
}

void DBGetPacketRTX(char *interface,unsigned long *rx_bytes,unsigned long *tx_bytes)
{
	FILE *fp;
	char buff[256];
	int  nl = 0 ;

	unsigned long r_bytes,r_packets,r_errs,r_drop,r_fifo, r_frame, r_compressed,r_multicast;
	unsigned long t_bytes,t_packets,t_errs,t_drop,t_fifo, t_frame, t_compressed,t_multicast;

	fp = fopen ( _PATH_PACKETRTX, "rt" );
	if (!fp)
	{
		printf ("Can't open file %s\n",_PATH_PACKETRTX );
		*rx_bytes = 0;
		*tx_bytes = 0;
		return;
	}

	while( fgets(buff, sizeof(buff), fp) != NULL )
	{
		if(nl>1)
		{
			int ifl = 0;
			while(buff[ifl]!=':' && buff[ifl]!='\t' && buff[ifl]!='\0')
				ifl++;
		//	buff[ifl]=0;    /* interface */
		//	printf ("interface=%s search=%s\n", buff,interface );

			if ( strstr( buff, interface) )
			{
		//		printf ("searched! S=%s\n", buff+ifl+1 );
				if(sscanf(buff+ifl+1, "%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld",
			    		&r_bytes,&r_packets,&r_errs,&r_drop,&r_fifo, &r_frame, &r_compressed,&r_multicast,
			    		&t_bytes,&t_packets,&t_errs,&t_drop,&t_fifo, &t_frame, &t_compressed,&t_multicast  )!=16)
				{
					*rx_bytes = 0;
					*tx_bytes = 0;
					fclose(fp);
					return;
				}
				fclose(fp);
				*rx_bytes = r_bytes;
				*tx_bytes = t_bytes;
//				printf ( "Packet: t_bytes: %d", t_bytes );
				return;

			}

			ifl = 0;
        	}
		nl++;
	}

	*rx_bytes = 0;
	*tx_bytes = 0;
	fclose(fp);
}

int get_info_from_IDU(int channel)
{
	unsigned long ulRx_bytes1,ulRx_bytes2;
	unsigned long ulTx_bytes1,ulTx_bytes2,tmp;
	int mem_occup,cpu_occup,flash_occup,net_flow;
	char ifname[]="eth0";

	switch ( channel )
	{
		case self_test:
		{
			//add code here to check the result of self-test
		}
		break;

		case cpu_occupancy:
		{
			DBGetCpuInfo( &cpu_occup);
			return cpu_occup;		
		}
		break;
		
		case flash_occupancy:
		{
			DBGetFlashInfo( &flash_occup);
			return flash_occup;
		}
		break;
		
		case mem_occupancy:
		{
			DBGetMemInfo( &mem_occup );
			return mem_occup;
		}
		break;
		
		case network_flow:
		{
			DBGetPacketRTX( ifname,&ulRx_bytes1, &ulTx_bytes1 );
			//delay(1s) need to add code here
			DBGetPacketRTX( ifname,&ulRx_bytes2, &ulTx_bytes2 );
			//return KByte,so move ten bit to right = netflow/1024
			tmp = ((ulRx_bytes2+ulTx_bytes2)-(ulRx_bytes1+ulTx_bytes1));
			net_flow = tmp>>10;
			return net_flow;
			
		}
		break;
		
		default:
		{
			printf("error message from get_info_from_IDU\n");
			return -1;
		}
	}
}

#define TTYS_ONLY_NAME		"ttyS"
#define TTYS_FULL_PREFIX	"/dev/ttyS"
#define TTYS_ALIAS_NAME		"COM"
#define CONST_STRLEN(const_str)	(sizeof(const_str)-1)
/*==========================================================================*
 * FUNCTION : Virtual_GetDescriptor
 * PURPOSE  : Convert the non-standard serial device name such as ttyS0, ttyS1,
 *            to /dev/ttyS0, /dev/ttyS1..., and also convert COM1, COM2, ..., to
 *            /dev/ttyS0, /dev/ttyS1, and also convert "1", "2" to /dev/ttyS0, 
 *            /dev/ttyS1....
 * CALLS    : 
 * CALLED BY: Virtual_CommOpen
 * ARGUMENTS: IN char   *pPortDescriptor : 
 *            OUT char  *pStdDescriptor  : 
 * RETURN   : static int : the actual serial port start from 0, -1 for error. 
 * COMMENTS : 
 * CREATOR  : Wan Kun                DATE: 2006-05-05 17:26
 *==========================================================================*/
static int Virtual_GetDescriptor(IN char *pPortDescriptor,
				 OUT char *pStdDescriptor)
{
	char	*pComNum = NULL;
	int	nComNumStart, nComNum;

	// 1. Test if the name is full name or not. 
	//    this comparison is case sensitive
	if (strncmp(pPortDescriptor, TTYS_FULL_PREFIX,
		CONST_STRLEN(TTYS_FULL_PREFIX)) == 0)
	{
		// the full name is used.
		pComNum = pPortDescriptor + CONST_STRLEN(TTYS_FULL_PREFIX);
		nComNumStart = 0;	// /dev/ttySn, the n starts from 0.
	}

	// 2. to test if only the name, the /dev/ does not exist. 
	//    this comparison is case sensitive
	else if (strncmp(pPortDescriptor, TTYS_ONLY_NAME,
		CONST_STRLEN(TTYS_ONLY_NAME)) == 0)
	{
		// only the name is used.
		pComNum = pPortDescriptor + CONST_STRLEN(TTYS_ONLY_NAME);
		nComNumStart = 0;	// ttySn, the n starts from 0.
	}

	// 3. to the alias name COMx is used or not.
	//    this comparison is NOT case sensitive
	else if (strnicmp(pPortDescriptor, TTYS_ALIAS_NAME,
		CONST_STRLEN(TTYS_ALIAS_NAME)) == 0)
	{
		// the alias name is used.
		pComNum = pPortDescriptor + CONST_STRLEN(TTYS_ALIAS_NAME);
		nComNumStart = 1;	// COMn, the n starts from 1.
	}

	// 4. we consider only the port num such as 1, 2,... is passed in.
	else 
	{
		pComNum = pPortDescriptor;
		nComNumStart = 1;	// only the com num 'n', the n starts from 1.
	}

	//nComNum = (pComNum[0]-'0') - nComNumStart;	// the actual serial port num

	// 5. to test the comm number is correct or not.
	//    the comm num shall be a digital string.
	//    IDU virtual device only have:com10,com11,com21,com31
	//     modified by wankun
	if(sscanf(pComNum,"%d",&nComNum)!=1) printf("read desicriptor is error!\n");
	nComNum = nComNum - nComNumStart;	
	if ((nComNum < 0) || (nComNum > 49))
	{
		printf("[Serial_GetDescriptor] -- The port descriptor %s is invalid.\n",
			pPortDescriptor);

		return -1;
	}	
	if ( !strcmp(pComNum,"5")) return IDU_Virtual_Device;
	else if ( !strcmp(pComNum,"6")) return IO_Virtual_Device;
	else if ( !strcmp(pComNum,"7")) return DOOR_Open_Device;
	else if ((!strcmp(pComNum,"11")) || (!strcmp(pComNum,"21")))
		{
		   printf("now make judgement from driver\n");
		   // add a proc/func here to make choice!
		}
	else
	{
		TRACE("[Virtual_GetDescriptor] -- The port descriptor %s is invalid.\n",
			pPortDescriptor);

		return NO_Virtual_Device;
	}
	

    // 6. merge the full port name. The buffer is big enough.
	sprintf(pStdDescriptor, "%s%d",
		TTYS_FULL_PREFIX,	// /dev/ttyS
		nComNum);		// actual comm num from 0


#ifdef _DEBUG_VIRTUAL_PORT
	TRACE("[Virtual_GetDescriptor] -- convert %s got %s\n",
		pPortDescriptor, pStdDescriptor);
#endif //_DEBUG_VIRTUAL_PORT

	
	//return nComNum;
}

/*==========================================================================*
 * FUNCTION : Virtual_CommOpen
 * PURPOSE  : To open a virtual communication port.
 * CALLS    : 
 * CALLED BY: 
 * ARGUMENTS: IN char   *pPortDescriptor : The serial descriptor in Linux, 
 *				       "10"/"!!"/"21"/"31"
 *            IN char   *pOpenParams     : nothing
 *            IN DWORD  dwPortAttr       : B00=COMM_SERVER_MODE for server port
 *                                         B00=COMM_CLIENT_MODE for client port
 *            IN int    nTimeout         : Open timeout in ms
 *            OUT int   *pErrCode        : prt to save error code.
 * RETURN   : HANDLE : 
 * COMMENTS : 
 * CREATOR  : Wan Kun                DATE: 2006-05-07 17:55
 *==========================================================================*/
HANDLE Virtual_CommOpen(
	IN char		*pPortDescriptor,
	IN char		*pOpenParams,
	IN DWORD	dwPortAttr,
	IN int		nTimeout,
	OUT int		*pErrCode)
{
	//printf("in virtual now!\n");----add by wankun
	VIRTUAL_PORT_DRV *pPort = NEW(VIRTUAL_PORT_DRV, 1);
	
	// full port device name, like: /dev/ttyS0
	char	szFullDescriptor[sizeof(TTYS_FULL_PREFIX)+2];
	
	/* 1. get mem */
	if (pPort == NULL)
	{
		*pErrCode = ERR_COMM_NO_MEMORY;
		return	NULL;
	}

	memset(pPort, 0, sizeof(VIRTUAL_PORT_DRV));

	/* 2. parse descriptor */
	pPort->VirtualDevice = Virtual_GetDescriptor(pPortDescriptor, szFullDescriptor);
	printf("now virtual device is %d\n",pPort->VirtualDevice);
	if (pPort->VirtualDevice < 0)
	{
#ifdef _DEBUG_VIRTUAL_PORT
		TRACE("[Virtual_CommOpen] -- invalid port descriptor: \"%s\".\n",
			pPortDescriptor);
#endif //_DEBUG_VIRTUAL_PORT

		DELETE(pPort);
		*pErrCode = ERR_COMM_OPENING_PARAM;

		return	NULL;
	}


	INIT_TIMEOUTS(pPort->toTimeouts, nTimeout, nTimeout);
	
	// open the serial port
	*pErrCode = ERR_COMM_OK;

	return (HANDLE)pPort;
}

HANDLE Virtual_CommAccept(IN HANDLE hPort)
{
	return hPort;
}

static void dump_buf( char *buf, int n)
{
	while (n > 0)
	{
		printf( "%c", *buf ++);
		n --;
	}

	printf( "\n" );
}

/* The "CommRead" proc for comm driver */
/*==========================================================================*
 * FUNCTION : Virtual_CommRead
 * PURPOSE  : Read data from a opened serial port
 * CALLS    : 
 * CALLED BY: 
 * ARGUMENTS: IN HANDLE  hPort        : the opened port
 *            OUT char   *pBuffer     : The buffer to save received data
 *            IN int     nBytesToRead :
 * RETURN   : int : the actual read bytes.
 * COMMENTS : The caller shall check the bytes to read is equal to the returned
 *            bytes to decide the read action is successful or not.
 * CREATOR  : Wan Kun                DATE: 2006-05-07 21:17
 *==========================================================================*/
int Virtual_CommRead(IN HANDLE hPort, OUT char *pBuffer, IN int nBytesToRead)
{
	VIRTUAL_PORT_DRV *pPort     = (VIRTUAL_PORT_DRV *)hPort;
	int value_from_IDU = 0;
	int digit_from_IO = 0;
	float float_from_IO = 0.0;
	float float_from_BAT=0.0;
	char buf[4];
	
	/* clear last error */
	pPort->nLastErrorCode = ERR_COMM_OK;

#ifdef _test
	//printf("channel=%d\n",pPort->ChannelId);
	sprintf(buf,"%d", pPort->ChannelId);
	strcpy(pBuffer,buf);
	//dump_buf( pBuffer, (int)strlen(&pBuffer));
	//printf("length=%d\n",(int)strlen(&pBuffer));
	return strlen(pBuffer);//use (int)strlen(pBuffer) in gcc have problem!
#else
	switch(pPort->VirtualDevice)
	{
		case IDU_Virtual_Device:
		{
			value_from_IDU = get_info_from_IDU( pPort->ChannelId);
			if ( value_from_IDU < 0 )
			{
				pPort->nLastErrorCode = ERR_COMM_READ_DATA;
/*#ifdef _DEBUG_VIRTUAL_PORT
				TRACE("[Virtual_CommRead] -- Read data error(%x)\n",
					pPort->nLastErrorCode);
#endif //_DEBUG_VIRTUAL_PORT */
				return 0;
			}
			sprintf( pBuffer, "I %d", &value_from_IDU );
			//make compare with nByteToRead
			if(strlen(pBuffer) > nBytesToRead)
			{
				pPort->nLastErrorCode = ERR_COMM_READ_DATA;
/*#ifdef _DEBUG_VIRTUAL_PORT
				TRACE("[Virtual_CommRead] -- Read data error(%x)\n",
					pPort->nLastErrorCode);
#endif //_DEBUG_VIRTUAL_PORT */
				return 0;
			}
			else return strlen(pBuffer);
		}
		break;
		
		case IO_Virtual_Device:
		{
			//read the data of common area, add code here
			if (( pPort->ChannelId >= 15) && (pPort->ChannelId <= 19))
			{
				sprintf(pBuffer, "I %d", &digit_from_IO);
			}
			else
			{
				sprintf(pBuffer, "F %f", &float_from_IO);
			}
			//return the length of pBuffer
		}
		break;
		
		case BAT_Virtual_Device:
		{
			//read the data of common area, add code here
			sprintf(pBuffer, "F %f", &float_from_BAT);
		}
		break;
		
		case DOOR_Open_Device:
		{
			//if need give a feedback to user, just add code here!
		}
		break;
		
		case NO_Virtual_Device:
		{

		}
		break;
	}
#endif //end of ifdef _test
}

extern int set_relay_value_to_io(int channel, int value);
/* The "CommWrite" proc for comm driver */
/*==========================================================================*
 * FUNCTION : Virtual_CommWrite
 * PURPOSE  : write a buffer to a port
 * CALLS    : 
 * CALLED BY: 
 * ARGUMENTS: IN HANDLE  hPort         : 
 *            IN char    *pBuffer      : 
 *            IN int     nBytesToWrite : 
 * RETURN   : int : =0 for error.  = nBytesToWrite ok
 * COMMENTS : 
 * CREATOR  : Wan Kun                DATE: 2006-05-07 21:36
 *==========================================================================*/
int Virtual_CommWrite(IN HANDLE hPort, IN char *pBuffer,IN int nBytesToWrite)
{
	VIRTUAL_PORT_DRV *pPort     = (VIRTUAL_PORT_DRV *)hPort;
	int				id_channel = 0;
	int rc,d_type,door_status;
	char d_out[24];

	/* clear last error */
	pPort->nLastErrorCode = ERR_COMM_OK;

//	rc = WaitFiledWritable(fd, pPort->toTimeouts.nReadTimeout);

#ifdef _test
	if(sscanf(pBuffer,"%d",&id_channel)!=1) return 0;
	//printf("id_channel=%d\n",id_channel);
	pPort->ChannelId = id_channel;
	return 1;
#else
	//add code to analyze the content of pbuffer, and then allocate the right value to the right variable
	if(sscanf(pBuffer,"%d",&d_type)!=1) return 0;
	switch ( d_type )
	{
		case only_channel:
		{
			if(sscanf(pBuffer,"%d%d",&d_type,&id_channel)!=2) 
			{
				pPort->nLastErrorCode =  ERR_COMM_WRITE_DATA;
#ifdef _DEBUG_VIRTUAL_PORT
				TRACE("[Virtual_CommWrite] -- Write data error(%x)\n",
					pPort->nLastErrorCode);
#endif //_DEBUG_VIRTUAL_PORT
				return 0;	// wrong operation!
			}
		}
		break;
		case channel_and_outdata:
		{
			if(sscanf(pBuffer,"%d%d%s",&d_type,&id_channel,d_out)!=3)
			{
				pPort->nLastErrorCode =  ERR_COMM_WRITE_DATA;
#ifdef _DEBUG_VIRTUAL_PORT
				TRACE("[Virtual_CommWrite] -- Write data error(%x)\n",
					pPort->nLastErrorCode);
#endif //_DEBUG_VIRTUAL_PORT
				return 0;	// wrong operation!
			}	
		}
		break;
		case door_open_or_close:
		{
			if(sscanf(pBuffer,"%d%d",&d_type,&door_status)!=2)
			{
				pPort->nLastErrorCode =  ERR_COMM_WRITE_DATA;
#ifdef _DEBUG_VIRTUAL_PORT
				TRACE("[Virtual_CommWrite] -- Write data error(%x)\n",
					pPort->nLastErrorCode);
#endif //_DEBUG_VIRTUAL_PORT
				return 0;	// wrong operation!
			}	
		}
		break;
		default:
		{
			printf("unknown data type,error!\n");
			return 0;
		}
	}
	//make judgement,and then allocate the right channel to the virtual device
	switch(pPort->VirtualDevice)
	{
		case IDU_Virtual_Device:
		{
			if ((id_channel < 0)||(id_channel > 4))
			{
			 	pPort->nLastErrorCode =  ERR_COMM_WRITE_DATA;
#ifdef _DEBUG_VIRTUAL_PORT
				TRACE("[Virtual_CommWrite] -- Write data error(%x)\n",
					pPort->nLastErrorCode);
#endif //_DEBUG_VIRTUAL_PORT
				printf("this is not the channel of idu virtual device!\n");
				return 0;	// wrong operation!
			}
			pPort->ChannelId = id_channel;
		}
		break;
		
		case IO_Virtual_Device:
		{
			if ((id_channel < 0)||(id_channel > 26))
			{
			 	pPort->nLastErrorCode =  ERR_COMM_WRITE_DATA;
#ifdef _DEBUG_VIRTUAL_PORT
				TRACE("[Virtual_CommWrite] -- Write data error(%x)\n",
					pPort->nLastErrorCode);
#endif //_DEBUG_VIRTUAL_PORT
				printf("this is not the channel of idu virtual device!\n");
				return 0;	// wrong operation!
			}
			pPort->ChannelId = id_channel;		
		}
		break;
		
		case BAT_Virtual_Device:
		{
			if ((id_channel < 0)||(id_channel > 55))
			{
			 	pPort->nLastErrorCode =  ERR_COMM_WRITE_DATA;
#ifdef _DEBUG_VIRTUAL_PORT
				TRACE("[Virtual_CommWrite] -- Write data error(%x)\n",
					pPort->nLastErrorCode);
#endif //_DEBUG_VIRTUAL_PORT
				printf("this is not the channel of idu virtual device!\n");
				return 0;	// wrong operation!
			}
			pPort->ChannelId = id_channel;		
		}
		break;
		
		case DOOR_Open_Device:
		{
			//add code here to open the door forbiden
			rc=set_relay_value_to_io(id_channel_door,door_status);
			if(!rc) printf("open or close door failed\n");
		}
		break;
		
		case NO_Virtual_Device:
		{
			pPort->nLastErrorCode =  ERR_COMM_WRITE_DATA;
#ifdef _DEBUG_VIRTUAL_PORT
			TRACE("[Virtual_CommWrite] -- Write data error(%x)\n",
					pPort->nLastErrorCode);
#endif //_DEBUG_VIRTUAL_PORT
			printf("no virtual device at all , you should open virtual device again!\n");
			pPort->ChannelId = -1;
			return 0;	// wrong operation!
		}
		break;
	}
    return nBytesToWrite;
#endif	//end of ifdef _test


}

/* The "CommControl" proc for comm driver */
/*==========================================================================*
 * FUNCTION : Virtual_CommControl
 * PURPOSE  : To control a opened port with command nCmd.
 * CALLS    : 
 * CALLED BY: 
 * ARGUMENTS: IN HANDLE    hPort       : 
 *            IN int       nCmd        : 
 *            IN OUT void  *pBuffer    : 
 *            IN int       nDataLength : 
 * RETURN   : int :1 for OK, 0 is error code
 * COMMENTS : 
 * CREATOR  : Wan Kun                DATE: 2006-05-07 21:45
 *==========================================================================*/
int Virtual_CommControl( IN HANDLE hPort, IN int nCmd, IN OUT void *pBuffer,IN int nDataLength)
{
//add code here
	VIRTUAL_PORT_DRV *pPort     = (VIRTUAL_PORT_DRV *)hPort;
	int ch_id,ch_value;
	switch ( nCmd )
	{
		case cancel_warning:
		{
			if ( sscanf((char *)pBuffer,"%d%d",&ch_id,&ch_value)!=2)
			{
				printf("read cancel warning message error!\n");
				return 0;
			}
			sprintf(warning_status,"%d%d",&ch_id,&ch_value);
			return 1;
		}
		break;
		default:
		{
			printf("unknown command!\n");
			return 0;
	}	}
	return 1;
}

/* The "CommClose" proc for comm driver */
/*==========================================================================*
 * FUNCTION : Virtual_CommClose
 * PURPOSE  : Close an opened port and release the memory of the port
 * CALLS    : 
 * CALLED BY: 
 * ARGUMENTS: IN HANDLE  hPort : 
 * RETURN   : int : ERR_COMM_OK or ERR_COMM_PORT_HANDLE
 * COMMENTS : 
 * CREATOR  : Wan Kun                DATE: 2006-05-07 20:32
 *==========================================================================*/
int Virtual_CommClose(IN HANDLE hPort)
{
//add code here 1---error  0---right
	VIRTUAL_PORT_DRV *pPort     = (VIRTUAL_PORT_DRV *)hPort;
	if(hPort == NULL) return 1;
	DELETE(pPort);
	return 0;
}
